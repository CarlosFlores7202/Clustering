import matplotlib.pyplot as plt
import pandas as pd
import math

data_points = [
    (185, 72),
    (170, 56),
    (168, 60),
    (179, 68),
    (182, 72),
    (188, 77)
]

# Iniciando centroides
centroid1 = data_points[0]
centroid2 = data_points[1]

# Listas para guardar centroides
centroid1_x = [centroid1[0]]
centroid1_y = [centroid1[1]]
centroid2_x = [centroid2[0]]
centroid2_y = [centroid2[1]]

# dataFrame para almacenar las asignaciones
assignments = pd.DataFrame(data_points, columns=['X', 'Y'])
assignments['Assignment'] = 1  # Inicialmente, asignar todo a 1er clúster

#iteraciones
max_iterations = 5

for _ in range(max_iterations):
    # guardar puntos
    cluster1 = []
    cluster2 = []

    for i, point in enumerate(data_points):
        x, y = point
        #coseno del ángulo entre el punto y el primer centroide
        dot_product1 = x * centroid1[0] + y * centroid1[1]
        magnitude_point = math.sqrt(x**2 + y**2)
        magnitude_centroid1 = math.sqrt(centroid1[0]**2 + centroid1[1]**2)
        cosine_similarity1 = dot_product1 / (magnitude_point * magnitude_centroid1)

        #coseno del ángulo entre el punto y el segundo centroide
        dot_product2 = x * centroid2[0] + y * centroid2[1]
        magnitude_centroid2 = math.sqrt(centroid2[0]**2 + centroid2[1]**2)
        cosine_similarity2 = dot_product2 / (magnitude_point * magnitude_centroid2)

        if cosine_similarity1 > cosine_similarity2:
            cluster1.append(point)
            assignments.at[i, 'Assignment'] = 1
        else:
            cluster2.append(point)
            assignments.at[i, 'Assignment'] = 2

    #nuevos centroides
    centroid1 = (sum(p[0] for p in cluster1) / len(cluster1),
                sum(p[1] for p in cluster1) / len(cluster1))

    centroid2 = (sum(p[0] for p in cluster2) / len(cluster2),
                sum(p[1] for p in cluster2) / len(cluster2))

    # Actualizar centroides
    centroid1_x.append(centroid1[0])
    centroid1_y.append(centroid1[1])
    centroid2_x.append(centroid2[0])
    centroid2_y.append(centroid2[1])
print("Centroides Finales")
print(centroid1, centroid2)

# grafica centroides
plt.scatter(assignments['X'], assignments['Y'], c=assignments['Assignment'], cmap='viridis', label='Puntos')
plt.scatter(centroid1_x, centroid1_y, marker='x', c='r', label='Centroide 1')
plt.scatter(centroid2_x, centroid2_y, marker='x', c='g', label='Centroide 2')
plt.legend()
plt.show()

# asignaciones
print("Asignaciones:")
print(assignments)
